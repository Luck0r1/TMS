// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: full_type.proto

#include "full_type.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_full_5ftype_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FullTypeDef_full_5ftype_2eproto;
namespace tensorflow {
class FullTypeDefDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FullTypeDef> _instance;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr s_;
  ::PROTOBUF_NAMESPACE_ID::int64 i_;
} _FullTypeDef_default_instance_;
}  // namespace tensorflow
static void InitDefaultsscc_info_FullTypeDef_full_5ftype_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tensorflow::_FullTypeDef_default_instance_;
    new (ptr) ::tensorflow::FullTypeDef();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tensorflow::FullTypeDef::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FullTypeDef_full_5ftype_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_FullTypeDef_full_5ftype_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_full_5ftype_2eproto[1];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_full_5ftype_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_full_5ftype_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_full_5ftype_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::FullTypeDef, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::tensorflow::FullTypeDef, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tensorflow::FullTypeDef, type_id_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::FullTypeDef, args_),
  offsetof(::tensorflow::FullTypeDefDefaultTypeInternal, s_),
  offsetof(::tensorflow::FullTypeDefDefaultTypeInternal, i_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::FullTypeDef, attr_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::tensorflow::FullTypeDef)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tensorflow::_FullTypeDef_default_instance_),
};

const char descriptor_table_protodef_full_5ftype_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\017full_type.proto\022\ntensorflow\"\177\n\013FullTyp"
  "eDef\022\'\n\007type_id\030\001 \001(\0162\026.tensorflow.FullT"
  "ypeId\022%\n\004args\030\002 \003(\0132\027.tensorflow.FullTyp"
  "eDef\022\013\n\001s\030\003 \001(\tH\000\022\013\n\001i\030\004 \001(\003H\000B\006\n\004attr*\303"
  "\004\n\nFullTypeId\022\r\n\tTFT_UNSET\020\000\022\013\n\007TFT_VAR\020"
  "\001\022\013\n\007TFT_ANY\020\002\022\017\n\013TFT_PRODUCT\020\003\022\r\n\tTFT_N"
  "AMED\020\004\022\020\n\014TFT_FOR_EACH\020\024\022\020\n\014TFT_CALLABLE"
  "\020d\022\017\n\nTFT_TENSOR\020\350\007\022\016\n\tTFT_ARRAY\020\351\007\022\021\n\014T"
  "FT_OPTIONAL\020\352\007\022\020\n\013TFT_LITERAL\020\353\007\022\020\n\013TFT_"
  "ENCODED\020\354\007\022\r\n\010TFT_BOOL\020\310\001\022\016\n\tTFT_UINT8\020\311"
  "\001\022\017\n\nTFT_UINT16\020\312\001\022\017\n\nTFT_UINT32\020\313\001\022\017\n\nT"
  "FT_UINT64\020\314\001\022\r\n\010TFT_INT8\020\315\001\022\016\n\tTFT_INT16"
  "\020\316\001\022\016\n\tTFT_INT32\020\317\001\022\016\n\tTFT_INT64\020\320\001\022\r\n\010T"
  "FT_HALF\020\321\001\022\016\n\tTFT_FLOAT\020\322\001\022\017\n\nTFT_DOUBLE"
  "\020\323\001\022\021\n\014TFT_BFLOAT16\020\327\001\022\022\n\rTFT_COMPLEX64\020"
  "\324\001\022\023\n\016TFT_COMPLEX128\020\325\001\022\017\n\nTFT_STRING\020\326\001"
  "\022\020\n\013TFT_DATASET\020\366N\022\017\n\nTFT_RAGGED\020\367N\022\021\n\014T"
  "FT_ITERATOR\020\370N\022\023\n\016TFT_MUTEX_LOCK\020\332O\022\027\n\022T"
  "FT_LEGACY_VARIANT\020\333OB\201\001\n\030org.tensorflow."
  "frameworkB\016FullTypeProtosP\001ZPgithub.com/"
  "tensorflow/tensorflow/tensorflow/go/core"
  "/framework/full_type_go_proto\370\001\001b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_full_5ftype_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_full_5ftype_2eproto_sccs[1] = {
  &scc_info_FullTypeDef_full_5ftype_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_full_5ftype_2eproto_once;
static bool descriptor_table_full_5ftype_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_full_5ftype_2eproto = {
  &descriptor_table_full_5ftype_2eproto_initialized, descriptor_table_protodef_full_5ftype_2eproto, "full_type.proto", 880,
  &descriptor_table_full_5ftype_2eproto_once, descriptor_table_full_5ftype_2eproto_sccs, descriptor_table_full_5ftype_2eproto_deps, 1, 0,
  schemas, file_default_instances, TableStruct_full_5ftype_2eproto::offsets,
  file_level_metadata_full_5ftype_2eproto, 1, file_level_enum_descriptors_full_5ftype_2eproto, file_level_service_descriptors_full_5ftype_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_full_5ftype_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_full_5ftype_2eproto), true);
namespace tensorflow {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* FullTypeId_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_full_5ftype_2eproto);
  return file_level_enum_descriptors_full_5ftype_2eproto[0];
}
bool FullTypeId_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 20:
    case 100:
    case 200:
    case 201:
    case 202:
    case 203:
    case 204:
    case 205:
    case 206:
    case 207:
    case 208:
    case 209:
    case 210:
    case 211:
    case 212:
    case 213:
    case 214:
    case 215:
    case 1000:
    case 1001:
    case 1002:
    case 1003:
    case 1004:
    case 10102:
    case 10103:
    case 10104:
    case 10202:
    case 10203:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void FullTypeDef::InitAsDefaultInstance() {
  ::tensorflow::_FullTypeDef_default_instance_.s_.UnsafeSetDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::tensorflow::_FullTypeDef_default_instance_.i_ = PROTOBUF_LONGLONG(0);
}
class FullTypeDef::_Internal {
 public:
};

FullTypeDef::FullTypeDef()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.FullTypeDef)
}
FullTypeDef::FullTypeDef(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena),
  args_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.FullTypeDef)
}
FullTypeDef::FullTypeDef(const FullTypeDef& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      args_(from.args_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  type_id_ = from.type_id_;
  clear_has_attr();
  switch (from.attr_case()) {
    case kS: {
      set_s(from.s());
      break;
    }
    case kI: {
      set_i(from.i());
      break;
    }
    case ATTR_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:tensorflow.FullTypeDef)
}

void FullTypeDef::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FullTypeDef_full_5ftype_2eproto.base);
  type_id_ = 0;
  clear_has_attr();
}

FullTypeDef::~FullTypeDef() {
  // @@protoc_insertion_point(destructor:tensorflow.FullTypeDef)
  SharedDtor();
}

void FullTypeDef::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  if (has_attr()) {
    clear_attr();
  }
}

void FullTypeDef::ArenaDtor(void* object) {
  FullTypeDef* _this = reinterpret_cast< FullTypeDef* >(object);
  (void)_this;
}
void FullTypeDef::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FullTypeDef::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FullTypeDef& FullTypeDef::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FullTypeDef_full_5ftype_2eproto.base);
  return *internal_default_instance();
}


void FullTypeDef::clear_attr() {
// @@protoc_insertion_point(one_of_clear_start:tensorflow.FullTypeDef)
  switch (attr_case()) {
    case kS: {
      attr_.s_.Destroy(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
          GetArenaNoVirtual());
      break;
    }
    case kI: {
      // No need to clear
      break;
    }
    case ATTR_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = ATTR_NOT_SET;
}


void FullTypeDef::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.FullTypeDef)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  args_.Clear();
  type_id_ = 0;
  clear_attr();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* FullTypeDef::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .tensorflow.FullTypeId type_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_type_id(static_cast<::tensorflow::FullTypeId>(val));
        } else goto handle_unusual;
        continue;
      // repeated .tensorflow.FullTypeDef args = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_args(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 18);
        } else goto handle_unusual;
        continue;
      // string s = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_s(), ptr, ctx, "tensorflow.FullTypeDef.s");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 i = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          set_i(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool FullTypeDef::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.FullTypeDef)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .tensorflow.FullTypeId type_id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type_id(static_cast< ::tensorflow::FullTypeId >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .tensorflow.FullTypeDef args = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_args()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string s = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_s()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->s().data(), static_cast<int>(this->s().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "tensorflow.FullTypeDef.s"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 i = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          clear_attr();
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &attr_.i_)));
          set_has_i();
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.FullTypeDef)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.FullTypeDef)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void FullTypeDef::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.FullTypeDef)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .tensorflow.FullTypeId type_id = 1;
  if (this->type_id() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      1, this->type_id(), output);
  }

  // repeated .tensorflow.FullTypeDef args = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->args_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->args(static_cast<int>(i)),
      output);
  }

  // string s = 3;
  if (has_s()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->s().data(), static_cast<int>(this->s().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.FullTypeDef.s");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->s(), output);
  }

  // int64 i = 4;
  if (has_i()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(4, this->i(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tensorflow.FullTypeDef)
}

::PROTOBUF_NAMESPACE_ID::uint8* FullTypeDef::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.FullTypeDef)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .tensorflow.FullTypeId type_id = 1;
  if (this->type_id() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->type_id(), target);
  }

  // repeated .tensorflow.FullTypeDef args = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->args_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->args(static_cast<int>(i)), target);
  }

  // string s = 3;
  if (has_s()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->s().data(), static_cast<int>(this->s().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.FullTypeDef.s");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        3, this->s(), target);
  }

  // int64 i = 4;
  if (has_i()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->i(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.FullTypeDef)
  return target;
}

size_t FullTypeDef::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.FullTypeDef)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .tensorflow.FullTypeDef args = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->args_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->args(static_cast<int>(i)));
    }
  }

  // .tensorflow.FullTypeId type_id = 1;
  if (this->type_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->type_id());
  }

  switch (attr_case()) {
    // string s = 3;
    case kS: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->s());
      break;
    }
    // int64 i = 4;
    case kI: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->i());
      break;
    }
    case ATTR_NOT_SET: {
      break;
    }
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FullTypeDef::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.FullTypeDef)
  GOOGLE_DCHECK_NE(&from, this);
  const FullTypeDef* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FullTypeDef>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.FullTypeDef)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.FullTypeDef)
    MergeFrom(*source);
  }
}

void FullTypeDef::MergeFrom(const FullTypeDef& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.FullTypeDef)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  args_.MergeFrom(from.args_);
  if (from.type_id() != 0) {
    set_type_id(from.type_id());
  }
  switch (from.attr_case()) {
    case kS: {
      set_s(from.s());
      break;
    }
    case kI: {
      set_i(from.i());
      break;
    }
    case ATTR_NOT_SET: {
      break;
    }
  }
}

void FullTypeDef::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.FullTypeDef)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FullTypeDef::CopyFrom(const FullTypeDef& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.FullTypeDef)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FullTypeDef::IsInitialized() const {
  return true;
}

void FullTypeDef::InternalSwap(FullTypeDef* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&args_)->InternalSwap(CastToBase(&other->args_));
  swap(type_id_, other->type_id_);
  swap(attr_, other->attr_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata FullTypeDef::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace tensorflow
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::tensorflow::FullTypeDef* Arena::CreateMaybeMessage< ::tensorflow::FullTypeDef >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::FullTypeDef >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
