// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: types.proto

#include "types.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
namespace tensorflow {
class SerializedDTypeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SerializedDType> _instance;
} _SerializedDType_default_instance_;
}  // namespace tensorflow
static void InitDefaultsscc_info_SerializedDType_types_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tensorflow::_SerializedDType_default_instance_;
    new (ptr) ::tensorflow::SerializedDType();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tensorflow::SerializedDType::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SerializedDType_types_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_SerializedDType_types_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_types_2eproto[1];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_types_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_types_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_types_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::SerializedDType, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tensorflow::SerializedDType, datatype_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::tensorflow::SerializedDType)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tensorflow::_SerializedDType_default_instance_),
};

const char descriptor_table_protodef_types_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\013types.proto\022\ntensorflow\"9\n\017SerializedD"
  "Type\022&\n\010datatype\030\001 \001(\0162\024.tensorflow.Data"
  "Type*\252\006\n\010DataType\022\016\n\nDT_INVALID\020\000\022\014\n\010DT_"
  "FLOAT\020\001\022\r\n\tDT_DOUBLE\020\002\022\014\n\010DT_INT32\020\003\022\014\n\010"
  "DT_UINT8\020\004\022\014\n\010DT_INT16\020\005\022\013\n\007DT_INT8\020\006\022\r\n"
  "\tDT_STRING\020\007\022\020\n\014DT_COMPLEX64\020\010\022\014\n\010DT_INT"
  "64\020\t\022\013\n\007DT_BOOL\020\n\022\014\n\010DT_QINT8\020\013\022\r\n\tDT_QU"
  "INT8\020\014\022\r\n\tDT_QINT32\020\r\022\017\n\013DT_BFLOAT16\020\016\022\r"
  "\n\tDT_QINT16\020\017\022\016\n\nDT_QUINT16\020\020\022\r\n\tDT_UINT"
  "16\020\021\022\021\n\rDT_COMPLEX128\020\022\022\013\n\007DT_HALF\020\023\022\017\n\013"
  "DT_RESOURCE\020\024\022\016\n\nDT_VARIANT\020\025\022\r\n\tDT_UINT"
  "32\020\026\022\r\n\tDT_UINT64\020\027\022\020\n\014DT_FLOAT_REF\020e\022\021\n"
  "\rDT_DOUBLE_REF\020f\022\020\n\014DT_INT32_REF\020g\022\020\n\014DT"
  "_UINT8_REF\020h\022\020\n\014DT_INT16_REF\020i\022\017\n\013DT_INT"
  "8_REF\020j\022\021\n\rDT_STRING_REF\020k\022\024\n\020DT_COMPLEX"
  "64_REF\020l\022\020\n\014DT_INT64_REF\020m\022\017\n\013DT_BOOL_RE"
  "F\020n\022\020\n\014DT_QINT8_REF\020o\022\021\n\rDT_QUINT8_REF\020p"
  "\022\021\n\rDT_QINT32_REF\020q\022\023\n\017DT_BFLOAT16_REF\020r"
  "\022\021\n\rDT_QINT16_REF\020s\022\022\n\016DT_QUINT16_REF\020t\022"
  "\021\n\rDT_UINT16_REF\020u\022\025\n\021DT_COMPLEX128_REF\020"
  "v\022\017\n\013DT_HALF_REF\020w\022\023\n\017DT_RESOURCE_REF\020x\022"
  "\022\n\016DT_VARIANT_REF\020y\022\021\n\rDT_UINT32_REF\020z\022\021"
  "\n\rDT_UINT64_REF\020{Bz\n\030org.tensorflow.fram"
  "eworkB\013TypesProtosP\001ZLgithub.com/tensorf"
  "low/tensorflow/tensorflow/go/core/framew"
  "ork/types_go_proto\370\001\001b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_types_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_types_2eproto_sccs[1] = {
  &scc_info_SerializedDType_types_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_types_2eproto_once;
static bool descriptor_table_types_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_types_2eproto = {
  &descriptor_table_types_2eproto_initialized, descriptor_table_protodef_types_2eproto, "types.proto", 1029,
  &descriptor_table_types_2eproto_once, descriptor_table_types_2eproto_sccs, descriptor_table_types_2eproto_deps, 1, 0,
  schemas, file_default_instances, TableStruct_types_2eproto::offsets,
  file_level_metadata_types_2eproto, 1, file_level_enum_descriptors_types_2eproto, file_level_service_descriptors_types_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_types_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_types_2eproto), true);
namespace tensorflow {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DataType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_types_2eproto);
  return file_level_enum_descriptors_types_2eproto[0];
}
bool DataType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 101:
    case 102:
    case 103:
    case 104:
    case 105:
    case 106:
    case 107:
    case 108:
    case 109:
    case 110:
    case 111:
    case 112:
    case 113:
    case 114:
    case 115:
    case 116:
    case 117:
    case 118:
    case 119:
    case 120:
    case 121:
    case 122:
    case 123:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void SerializedDType::InitAsDefaultInstance() {
}
class SerializedDType::_Internal {
 public:
};

SerializedDType::SerializedDType()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.SerializedDType)
}
SerializedDType::SerializedDType(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.SerializedDType)
}
SerializedDType::SerializedDType(const SerializedDType& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  datatype_ = from.datatype_;
  // @@protoc_insertion_point(copy_constructor:tensorflow.SerializedDType)
}

void SerializedDType::SharedCtor() {
  datatype_ = 0;
}

SerializedDType::~SerializedDType() {
  // @@protoc_insertion_point(destructor:tensorflow.SerializedDType)
  SharedDtor();
}

void SerializedDType::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
}

void SerializedDType::ArenaDtor(void* object) {
  SerializedDType* _this = reinterpret_cast< SerializedDType* >(object);
  (void)_this;
}
void SerializedDType::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SerializedDType::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SerializedDType& SerializedDType::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SerializedDType_types_2eproto.base);
  return *internal_default_instance();
}


void SerializedDType::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.SerializedDType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  datatype_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SerializedDType::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .tensorflow.DataType datatype = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_datatype(static_cast<::tensorflow::DataType>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SerializedDType::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.SerializedDType)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .tensorflow.DataType datatype = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_datatype(static_cast< ::tensorflow::DataType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.SerializedDType)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.SerializedDType)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SerializedDType::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.SerializedDType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .tensorflow.DataType datatype = 1;
  if (this->datatype() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      1, this->datatype(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tensorflow.SerializedDType)
}

::PROTOBUF_NAMESPACE_ID::uint8* SerializedDType::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.SerializedDType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .tensorflow.DataType datatype = 1;
  if (this->datatype() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->datatype(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.SerializedDType)
  return target;
}

size_t SerializedDType::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.SerializedDType)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .tensorflow.DataType datatype = 1;
  if (this->datatype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->datatype());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SerializedDType::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.SerializedDType)
  GOOGLE_DCHECK_NE(&from, this);
  const SerializedDType* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SerializedDType>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.SerializedDType)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.SerializedDType)
    MergeFrom(*source);
  }
}

void SerializedDType::MergeFrom(const SerializedDType& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.SerializedDType)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.datatype() != 0) {
    set_datatype(from.datatype());
  }
}

void SerializedDType::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.SerializedDType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SerializedDType::CopyFrom(const SerializedDType& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.SerializedDType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SerializedDType::IsInitialized() const {
  return true;
}

void SerializedDType::InternalSwap(SerializedDType* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(datatype_, other->datatype_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SerializedDType::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace tensorflow
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::tensorflow::SerializedDType* Arena::CreateMaybeMessage< ::tensorflow::SerializedDType >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::SerializedDType >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
