// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: coordination_config.proto

#include "coordination_config.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_coordination_5fconfig_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CoordinatedJob_coordination_5fconfig_2eproto;
namespace tensorflow {
class CoordinatedJobDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CoordinatedJob> _instance;
} _CoordinatedJob_default_instance_;
class CoordinationServiceConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CoordinationServiceConfig> _instance;
} _CoordinationServiceConfig_default_instance_;
}  // namespace tensorflow
static void InitDefaultsscc_info_CoordinatedJob_coordination_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tensorflow::_CoordinatedJob_default_instance_;
    new (ptr) ::tensorflow::CoordinatedJob();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tensorflow::CoordinatedJob::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CoordinatedJob_coordination_5fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_CoordinatedJob_coordination_5fconfig_2eproto}, {}};

static void InitDefaultsscc_info_CoordinationServiceConfig_coordination_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tensorflow::_CoordinationServiceConfig_default_instance_;
    new (ptr) ::tensorflow::CoordinationServiceConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tensorflow::CoordinationServiceConfig::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CoordinationServiceConfig_coordination_5fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_CoordinationServiceConfig_coordination_5fconfig_2eproto}, {
      &scc_info_CoordinatedJob_coordination_5fconfig_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_coordination_5fconfig_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_coordination_5fconfig_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_coordination_5fconfig_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_coordination_5fconfig_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::CoordinatedJob, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tensorflow::CoordinatedJob, name_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::CoordinatedJob, num_tasks_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::CoordinationServiceConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tensorflow::CoordinationServiceConfig, service_type_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::CoordinationServiceConfig, service_leader_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::CoordinationServiceConfig, enable_health_check_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::CoordinationServiceConfig, cluster_register_timeout_in_ms_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::CoordinationServiceConfig, heartbeat_timeout_in_ms_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::CoordinationServiceConfig, coordinated_job_list_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::CoordinationServiceConfig, shutdown_barrier_timeout_in_ms_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::CoordinationServiceConfig, agent_destruction_without_shutdown_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::CoordinationServiceConfig, recoverable_jobs_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::tensorflow::CoordinatedJob)},
  { 7, -1, sizeof(::tensorflow::CoordinationServiceConfig)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tensorflow::_CoordinatedJob_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tensorflow::_CoordinationServiceConfig_default_instance_),
};

const char descriptor_table_protodef_coordination_5fconfig_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\031coordination_config.proto\022\ntensorflow\""
  "1\n\016CoordinatedJob\022\014\n\004name\030\001 \001(\t\022\021\n\tnum_t"
  "asks\030\002 \001(\005\"\335\002\n\031CoordinationServiceConfig"
  "\022\024\n\014service_type\030\001 \001(\t\022\026\n\016service_leader"
  "\030\002 \001(\t\022\033\n\023enable_health_check\030\003 \001(\010\022&\n\036c"
  "luster_register_timeout_in_ms\030\004 \001(\003\022\037\n\027h"
  "eartbeat_timeout_in_ms\030\005 \001(\003\0228\n\024coordina"
  "ted_job_list\030\n \003(\0132\032.tensorflow.Coordina"
  "tedJob\022&\n\036shutdown_barrier_timeout_in_ms"
  "\030\007 \001(\003\022*\n\"agent_destruction_without_shut"
  "down\030\010 \001(\010\022\030\n\020recoverable_jobs\030\t \003(\tJ\004\010\006"
  "\020\007BWZUgithub.com/tensorflow/tensorflow/t"
  "ensorflow/go/core/protobuf/for_core_prot"
  "os_go_protob\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_coordination_5fconfig_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_coordination_5fconfig_2eproto_sccs[2] = {
  &scc_info_CoordinatedJob_coordination_5fconfig_2eproto.base,
  &scc_info_CoordinationServiceConfig_coordination_5fconfig_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_coordination_5fconfig_2eproto_once;
static bool descriptor_table_coordination_5fconfig_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_coordination_5fconfig_2eproto = {
  &descriptor_table_coordination_5fconfig_2eproto_initialized, descriptor_table_protodef_coordination_5fconfig_2eproto, "coordination_config.proto", 539,
  &descriptor_table_coordination_5fconfig_2eproto_once, descriptor_table_coordination_5fconfig_2eproto_sccs, descriptor_table_coordination_5fconfig_2eproto_deps, 2, 0,
  schemas, file_default_instances, TableStruct_coordination_5fconfig_2eproto::offsets,
  file_level_metadata_coordination_5fconfig_2eproto, 2, file_level_enum_descriptors_coordination_5fconfig_2eproto, file_level_service_descriptors_coordination_5fconfig_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_coordination_5fconfig_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_coordination_5fconfig_2eproto), true);
namespace tensorflow {

// ===================================================================

void CoordinatedJob::InitAsDefaultInstance() {
}
class CoordinatedJob::_Internal {
 public:
};

CoordinatedJob::CoordinatedJob()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.CoordinatedJob)
}
CoordinatedJob::CoordinatedJob(const CoordinatedJob& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.name().empty()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  num_tasks_ = from.num_tasks_;
  // @@protoc_insertion_point(copy_constructor:tensorflow.CoordinatedJob)
}

void CoordinatedJob::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CoordinatedJob_coordination_5fconfig_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  num_tasks_ = 0;
}

CoordinatedJob::~CoordinatedJob() {
  // @@protoc_insertion_point(destructor:tensorflow.CoordinatedJob)
  SharedDtor();
}

void CoordinatedJob::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CoordinatedJob::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CoordinatedJob& CoordinatedJob::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CoordinatedJob_coordination_5fconfig_2eproto.base);
  return *internal_default_instance();
}


void CoordinatedJob::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.CoordinatedJob)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  num_tasks_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CoordinatedJob::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_name(), ptr, ctx, "tensorflow.CoordinatedJob.name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 num_tasks = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          num_tasks_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CoordinatedJob::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.CoordinatedJob)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string name = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "tensorflow.CoordinatedJob.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 num_tasks = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_tasks_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.CoordinatedJob)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.CoordinatedJob)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CoordinatedJob::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.CoordinatedJob)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.CoordinatedJob.name");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // int32 num_tasks = 2;
  if (this->num_tasks() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->num_tasks(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tensorflow.CoordinatedJob)
}

::PROTOBUF_NAMESPACE_ID::uint8* CoordinatedJob::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.CoordinatedJob)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.CoordinatedJob.name");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // int32 num_tasks = 2;
  if (this->num_tasks() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->num_tasks(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.CoordinatedJob)
  return target;
}

size_t CoordinatedJob::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.CoordinatedJob)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->name());
  }

  // int32 num_tasks = 2;
  if (this->num_tasks() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->num_tasks());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CoordinatedJob::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.CoordinatedJob)
  GOOGLE_DCHECK_NE(&from, this);
  const CoordinatedJob* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CoordinatedJob>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.CoordinatedJob)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.CoordinatedJob)
    MergeFrom(*source);
  }
}

void CoordinatedJob::MergeFrom(const CoordinatedJob& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.CoordinatedJob)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.num_tasks() != 0) {
    set_num_tasks(from.num_tasks());
  }
}

void CoordinatedJob::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.CoordinatedJob)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CoordinatedJob::CopyFrom(const CoordinatedJob& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.CoordinatedJob)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CoordinatedJob::IsInitialized() const {
  return true;
}

void CoordinatedJob::InternalSwap(CoordinatedJob* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(num_tasks_, other->num_tasks_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CoordinatedJob::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CoordinationServiceConfig::InitAsDefaultInstance() {
}
class CoordinationServiceConfig::_Internal {
 public:
};

CoordinationServiceConfig::CoordinationServiceConfig()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.CoordinationServiceConfig)
}
CoordinationServiceConfig::CoordinationServiceConfig(const CoordinationServiceConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      recoverable_jobs_(from.recoverable_jobs_),
      coordinated_job_list_(from.coordinated_job_list_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  service_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.service_type().empty()) {
    service_type_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.service_type_);
  }
  service_leader_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.service_leader().empty()) {
    service_leader_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.service_leader_);
  }
  ::memcpy(&cluster_register_timeout_in_ms_, &from.cluster_register_timeout_in_ms_,
    static_cast<size_t>(reinterpret_cast<char*>(&agent_destruction_without_shutdown_) -
    reinterpret_cast<char*>(&cluster_register_timeout_in_ms_)) + sizeof(agent_destruction_without_shutdown_));
  // @@protoc_insertion_point(copy_constructor:tensorflow.CoordinationServiceConfig)
}

void CoordinationServiceConfig::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CoordinationServiceConfig_coordination_5fconfig_2eproto.base);
  service_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  service_leader_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&cluster_register_timeout_in_ms_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&agent_destruction_without_shutdown_) -
      reinterpret_cast<char*>(&cluster_register_timeout_in_ms_)) + sizeof(agent_destruction_without_shutdown_));
}

CoordinationServiceConfig::~CoordinationServiceConfig() {
  // @@protoc_insertion_point(destructor:tensorflow.CoordinationServiceConfig)
  SharedDtor();
}

void CoordinationServiceConfig::SharedDtor() {
  service_type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  service_leader_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CoordinationServiceConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CoordinationServiceConfig& CoordinationServiceConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CoordinationServiceConfig_coordination_5fconfig_2eproto.base);
  return *internal_default_instance();
}


void CoordinationServiceConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.CoordinationServiceConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  recoverable_jobs_.Clear();
  coordinated_job_list_.Clear();
  service_type_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  service_leader_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&cluster_register_timeout_in_ms_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&agent_destruction_without_shutdown_) -
      reinterpret_cast<char*>(&cluster_register_timeout_in_ms_)) + sizeof(agent_destruction_without_shutdown_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CoordinationServiceConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string service_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_service_type(), ptr, ctx, "tensorflow.CoordinationServiceConfig.service_type");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string service_leader = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_service_leader(), ptr, ctx, "tensorflow.CoordinationServiceConfig.service_leader");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool enable_health_check = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          enable_health_check_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 cluster_register_timeout_in_ms = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          cluster_register_timeout_in_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 heartbeat_timeout_in_ms = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          heartbeat_timeout_in_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 shutdown_barrier_timeout_in_ms = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          shutdown_barrier_timeout_in_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool agent_destruction_without_shutdown = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          agent_destruction_without_shutdown_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string recoverable_jobs = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(add_recoverable_jobs(), ptr, ctx, "tensorflow.CoordinationServiceConfig.recoverable_jobs");
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 74);
        } else goto handle_unusual;
        continue;
      // repeated .tensorflow.CoordinatedJob coordinated_job_list = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_coordinated_job_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 82);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CoordinationServiceConfig::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.CoordinationServiceConfig)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string service_type = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_service_type()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->service_type().data(), static_cast<int>(this->service_type().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "tensorflow.CoordinationServiceConfig.service_type"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string service_leader = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_service_leader()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->service_leader().data(), static_cast<int>(this->service_leader().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "tensorflow.CoordinationServiceConfig.service_leader"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool enable_health_check = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enable_health_check_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 cluster_register_timeout_in_ms = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &cluster_register_timeout_in_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 heartbeat_timeout_in_ms = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &heartbeat_timeout_in_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 shutdown_barrier_timeout_in_ms = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (56 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &shutdown_barrier_timeout_in_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool agent_destruction_without_shutdown = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (64 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &agent_destruction_without_shutdown_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string recoverable_jobs = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (74 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->add_recoverable_jobs()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->recoverable_jobs(this->recoverable_jobs_size() - 1).data(),
            static_cast<int>(this->recoverable_jobs(this->recoverable_jobs_size() - 1).length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "tensorflow.CoordinationServiceConfig.recoverable_jobs"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .tensorflow.CoordinatedJob coordinated_job_list = 10;
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (82 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_coordinated_job_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.CoordinationServiceConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.CoordinationServiceConfig)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CoordinationServiceConfig::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.CoordinationServiceConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string service_type = 1;
  if (this->service_type().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->service_type().data(), static_cast<int>(this->service_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.CoordinationServiceConfig.service_type");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->service_type(), output);
  }

  // string service_leader = 2;
  if (this->service_leader().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->service_leader().data(), static_cast<int>(this->service_leader().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.CoordinationServiceConfig.service_leader");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->service_leader(), output);
  }

  // bool enable_health_check = 3;
  if (this->enable_health_check() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(3, this->enable_health_check(), output);
  }

  // int64 cluster_register_timeout_in_ms = 4;
  if (this->cluster_register_timeout_in_ms() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(4, this->cluster_register_timeout_in_ms(), output);
  }

  // int64 heartbeat_timeout_in_ms = 5;
  if (this->heartbeat_timeout_in_ms() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(5, this->heartbeat_timeout_in_ms(), output);
  }

  // int64 shutdown_barrier_timeout_in_ms = 7;
  if (this->shutdown_barrier_timeout_in_ms() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(7, this->shutdown_barrier_timeout_in_ms(), output);
  }

  // bool agent_destruction_without_shutdown = 8;
  if (this->agent_destruction_without_shutdown() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(8, this->agent_destruction_without_shutdown(), output);
  }

  // repeated string recoverable_jobs = 9;
  for (int i = 0, n = this->recoverable_jobs_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->recoverable_jobs(i).data(), static_cast<int>(this->recoverable_jobs(i).length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.CoordinationServiceConfig.recoverable_jobs");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteString(
      9, this->recoverable_jobs(i), output);
  }

  // repeated .tensorflow.CoordinatedJob coordinated_job_list = 10;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->coordinated_job_list_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      10,
      this->coordinated_job_list(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tensorflow.CoordinationServiceConfig)
}

::PROTOBUF_NAMESPACE_ID::uint8* CoordinationServiceConfig::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.CoordinationServiceConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string service_type = 1;
  if (this->service_type().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->service_type().data(), static_cast<int>(this->service_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.CoordinationServiceConfig.service_type");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->service_type(), target);
  }

  // string service_leader = 2;
  if (this->service_leader().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->service_leader().data(), static_cast<int>(this->service_leader().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.CoordinationServiceConfig.service_leader");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->service_leader(), target);
  }

  // bool enable_health_check = 3;
  if (this->enable_health_check() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->enable_health_check(), target);
  }

  // int64 cluster_register_timeout_in_ms = 4;
  if (this->cluster_register_timeout_in_ms() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->cluster_register_timeout_in_ms(), target);
  }

  // int64 heartbeat_timeout_in_ms = 5;
  if (this->heartbeat_timeout_in_ms() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(5, this->heartbeat_timeout_in_ms(), target);
  }

  // int64 shutdown_barrier_timeout_in_ms = 7;
  if (this->shutdown_barrier_timeout_in_ms() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(7, this->shutdown_barrier_timeout_in_ms(), target);
  }

  // bool agent_destruction_without_shutdown = 8;
  if (this->agent_destruction_without_shutdown() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->agent_destruction_without_shutdown(), target);
  }

  // repeated string recoverable_jobs = 9;
  for (int i = 0, n = this->recoverable_jobs_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->recoverable_jobs(i).data(), static_cast<int>(this->recoverable_jobs(i).length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.CoordinationServiceConfig.recoverable_jobs");
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteStringToArray(9, this->recoverable_jobs(i), target);
  }

  // repeated .tensorflow.CoordinatedJob coordinated_job_list = 10;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->coordinated_job_list_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        10, this->coordinated_job_list(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.CoordinationServiceConfig)
  return target;
}

size_t CoordinationServiceConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.CoordinationServiceConfig)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string recoverable_jobs = 9;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->recoverable_jobs_size());
  for (int i = 0, n = this->recoverable_jobs_size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      this->recoverable_jobs(i));
  }

  // repeated .tensorflow.CoordinatedJob coordinated_job_list = 10;
  {
    unsigned int count = static_cast<unsigned int>(this->coordinated_job_list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->coordinated_job_list(static_cast<int>(i)));
    }
  }

  // string service_type = 1;
  if (this->service_type().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->service_type());
  }

  // string service_leader = 2;
  if (this->service_leader().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->service_leader());
  }

  // int64 cluster_register_timeout_in_ms = 4;
  if (this->cluster_register_timeout_in_ms() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->cluster_register_timeout_in_ms());
  }

  // int64 heartbeat_timeout_in_ms = 5;
  if (this->heartbeat_timeout_in_ms() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->heartbeat_timeout_in_ms());
  }

  // int64 shutdown_barrier_timeout_in_ms = 7;
  if (this->shutdown_barrier_timeout_in_ms() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->shutdown_barrier_timeout_in_ms());
  }

  // bool enable_health_check = 3;
  if (this->enable_health_check() != 0) {
    total_size += 1 + 1;
  }

  // bool agent_destruction_without_shutdown = 8;
  if (this->agent_destruction_without_shutdown() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CoordinationServiceConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.CoordinationServiceConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const CoordinationServiceConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CoordinationServiceConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.CoordinationServiceConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.CoordinationServiceConfig)
    MergeFrom(*source);
  }
}

void CoordinationServiceConfig::MergeFrom(const CoordinationServiceConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.CoordinationServiceConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  recoverable_jobs_.MergeFrom(from.recoverable_jobs_);
  coordinated_job_list_.MergeFrom(from.coordinated_job_list_);
  if (from.service_type().size() > 0) {

    service_type_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.service_type_);
  }
  if (from.service_leader().size() > 0) {

    service_leader_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.service_leader_);
  }
  if (from.cluster_register_timeout_in_ms() != 0) {
    set_cluster_register_timeout_in_ms(from.cluster_register_timeout_in_ms());
  }
  if (from.heartbeat_timeout_in_ms() != 0) {
    set_heartbeat_timeout_in_ms(from.heartbeat_timeout_in_ms());
  }
  if (from.shutdown_barrier_timeout_in_ms() != 0) {
    set_shutdown_barrier_timeout_in_ms(from.shutdown_barrier_timeout_in_ms());
  }
  if (from.enable_health_check() != 0) {
    set_enable_health_check(from.enable_health_check());
  }
  if (from.agent_destruction_without_shutdown() != 0) {
    set_agent_destruction_without_shutdown(from.agent_destruction_without_shutdown());
  }
}

void CoordinationServiceConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.CoordinationServiceConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CoordinationServiceConfig::CopyFrom(const CoordinationServiceConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.CoordinationServiceConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CoordinationServiceConfig::IsInitialized() const {
  return true;
}

void CoordinationServiceConfig::InternalSwap(CoordinationServiceConfig* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  recoverable_jobs_.InternalSwap(CastToBase(&other->recoverable_jobs_));
  CastToBase(&coordinated_job_list_)->InternalSwap(CastToBase(&other->coordinated_job_list_));
  service_type_.Swap(&other->service_type_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  service_leader_.Swap(&other->service_leader_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(cluster_register_timeout_in_ms_, other->cluster_register_timeout_in_ms_);
  swap(heartbeat_timeout_in_ms_, other->heartbeat_timeout_in_ms_);
  swap(shutdown_barrier_timeout_in_ms_, other->shutdown_barrier_timeout_in_ms_);
  swap(enable_health_check_, other->enable_health_check_);
  swap(agent_destruction_without_shutdown_, other->agent_destruction_without_shutdown_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CoordinationServiceConfig::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace tensorflow
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::tensorflow::CoordinatedJob* Arena::CreateMaybeMessage< ::tensorflow::CoordinatedJob >(Arena* arena) {
  return Arena::CreateInternal< ::tensorflow::CoordinatedJob >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::CoordinationServiceConfig* Arena::CreateMaybeMessage< ::tensorflow::CoordinationServiceConfig >(Arena* arena) {
  return Arena::CreateInternal< ::tensorflow::CoordinationServiceConfig >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
