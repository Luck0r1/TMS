// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: trackable_object_graph.proto

#include "trackable_object_graph.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2fwrappers_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BoolValue_google_2fprotobuf_2fwrappers_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_trackable_5fobject_5fgraph_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RegisteredSaver_trackable_5fobject_5fgraph_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_trackable_5fobject_5fgraph_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<5> scc_info_TrackableObjectGraph_TrackableObject_trackable_5fobject_5fgraph_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_trackable_5fobject_5fgraph_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TrackableObjectGraph_TrackableObject_ObjectReference_trackable_5fobject_5fgraph_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_trackable_5fobject_5fgraph_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TrackableObjectGraph_TrackableObject_SerializedTensor_trackable_5fobject_5fgraph_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_trackable_5fobject_5fgraph_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TrackableObjectGraph_TrackableObject_SlotVariableReference_trackable_5fobject_5fgraph_2eproto;
namespace tensorflow {
class TrackableObjectGraph_TrackableObject_ObjectReferenceDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TrackableObjectGraph_TrackableObject_ObjectReference> _instance;
} _TrackableObjectGraph_TrackableObject_ObjectReference_default_instance_;
class TrackableObjectGraph_TrackableObject_SerializedTensorDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TrackableObjectGraph_TrackableObject_SerializedTensor> _instance;
} _TrackableObjectGraph_TrackableObject_SerializedTensor_default_instance_;
class TrackableObjectGraph_TrackableObject_SlotVariableReferenceDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TrackableObjectGraph_TrackableObject_SlotVariableReference> _instance;
} _TrackableObjectGraph_TrackableObject_SlotVariableReference_default_instance_;
class TrackableObjectGraph_TrackableObjectDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TrackableObjectGraph_TrackableObject> _instance;
} _TrackableObjectGraph_TrackableObject_default_instance_;
class TrackableObjectGraphDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TrackableObjectGraph> _instance;
} _TrackableObjectGraph_default_instance_;
class RegisteredSaverDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RegisteredSaver> _instance;
} _RegisteredSaver_default_instance_;
}  // namespace tensorflow
static void InitDefaultsscc_info_RegisteredSaver_trackable_5fobject_5fgraph_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tensorflow::_RegisteredSaver_default_instance_;
    new (ptr) ::tensorflow::RegisteredSaver();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tensorflow::RegisteredSaver::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RegisteredSaver_trackable_5fobject_5fgraph_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_RegisteredSaver_trackable_5fobject_5fgraph_2eproto}, {}};

static void InitDefaultsscc_info_TrackableObjectGraph_trackable_5fobject_5fgraph_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tensorflow::_TrackableObjectGraph_default_instance_;
    new (ptr) ::tensorflow::TrackableObjectGraph();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tensorflow::TrackableObjectGraph::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TrackableObjectGraph_trackable_5fobject_5fgraph_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_TrackableObjectGraph_trackable_5fobject_5fgraph_2eproto}, {
      &scc_info_TrackableObjectGraph_TrackableObject_trackable_5fobject_5fgraph_2eproto.base,}};

static void InitDefaultsscc_info_TrackableObjectGraph_TrackableObject_trackable_5fobject_5fgraph_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tensorflow::_TrackableObjectGraph_TrackableObject_default_instance_;
    new (ptr) ::tensorflow::TrackableObjectGraph_TrackableObject();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tensorflow::TrackableObjectGraph_TrackableObject::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<5> scc_info_TrackableObjectGraph_TrackableObject_trackable_5fobject_5fgraph_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 5, InitDefaultsscc_info_TrackableObjectGraph_TrackableObject_trackable_5fobject_5fgraph_2eproto}, {
      &scc_info_TrackableObjectGraph_TrackableObject_ObjectReference_trackable_5fobject_5fgraph_2eproto.base,
      &scc_info_TrackableObjectGraph_TrackableObject_SerializedTensor_trackable_5fobject_5fgraph_2eproto.base,
      &scc_info_TrackableObjectGraph_TrackableObject_SlotVariableReference_trackable_5fobject_5fgraph_2eproto.base,
      &scc_info_RegisteredSaver_trackable_5fobject_5fgraph_2eproto.base,
      &scc_info_BoolValue_google_2fprotobuf_2fwrappers_2eproto.base,}};

static void InitDefaultsscc_info_TrackableObjectGraph_TrackableObject_ObjectReference_trackable_5fobject_5fgraph_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tensorflow::_TrackableObjectGraph_TrackableObject_ObjectReference_default_instance_;
    new (ptr) ::tensorflow::TrackableObjectGraph_TrackableObject_ObjectReference();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tensorflow::TrackableObjectGraph_TrackableObject_ObjectReference::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TrackableObjectGraph_TrackableObject_ObjectReference_trackable_5fobject_5fgraph_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_TrackableObjectGraph_TrackableObject_ObjectReference_trackable_5fobject_5fgraph_2eproto}, {}};

static void InitDefaultsscc_info_TrackableObjectGraph_TrackableObject_SerializedTensor_trackable_5fobject_5fgraph_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tensorflow::_TrackableObjectGraph_TrackableObject_SerializedTensor_default_instance_;
    new (ptr) ::tensorflow::TrackableObjectGraph_TrackableObject_SerializedTensor();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tensorflow::TrackableObjectGraph_TrackableObject_SerializedTensor::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TrackableObjectGraph_TrackableObject_SerializedTensor_trackable_5fobject_5fgraph_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_TrackableObjectGraph_TrackableObject_SerializedTensor_trackable_5fobject_5fgraph_2eproto}, {}};

static void InitDefaultsscc_info_TrackableObjectGraph_TrackableObject_SlotVariableReference_trackable_5fobject_5fgraph_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tensorflow::_TrackableObjectGraph_TrackableObject_SlotVariableReference_default_instance_;
    new (ptr) ::tensorflow::TrackableObjectGraph_TrackableObject_SlotVariableReference();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tensorflow::TrackableObjectGraph_TrackableObject_SlotVariableReference::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TrackableObjectGraph_TrackableObject_SlotVariableReference_trackable_5fobject_5fgraph_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_TrackableObjectGraph_TrackableObject_SlotVariableReference_trackable_5fobject_5fgraph_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_trackable_5fobject_5fgraph_2eproto[6];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_trackable_5fobject_5fgraph_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_trackable_5fobject_5fgraph_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_trackable_5fobject_5fgraph_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::TrackableObjectGraph_TrackableObject_ObjectReference, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tensorflow::TrackableObjectGraph_TrackableObject_ObjectReference, node_id_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::TrackableObjectGraph_TrackableObject_ObjectReference, local_name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::TrackableObjectGraph_TrackableObject_SerializedTensor, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tensorflow::TrackableObjectGraph_TrackableObject_SerializedTensor, name_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::TrackableObjectGraph_TrackableObject_SerializedTensor, full_name_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::TrackableObjectGraph_TrackableObject_SerializedTensor, checkpoint_key_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::TrackableObjectGraph_TrackableObject_SlotVariableReference, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tensorflow::TrackableObjectGraph_TrackableObject_SlotVariableReference, original_variable_node_id_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::TrackableObjectGraph_TrackableObject_SlotVariableReference, slot_name_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::TrackableObjectGraph_TrackableObject_SlotVariableReference, slot_variable_node_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::TrackableObjectGraph_TrackableObject, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tensorflow::TrackableObjectGraph_TrackableObject, children_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::TrackableObjectGraph_TrackableObject, attributes_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::TrackableObjectGraph_TrackableObject, slot_variables_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::TrackableObjectGraph_TrackableObject, registered_saver_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::TrackableObjectGraph_TrackableObject, has_checkpoint_values_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::TrackableObjectGraph, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tensorflow::TrackableObjectGraph, nodes_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::RegisteredSaver, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tensorflow::RegisteredSaver, name_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::RegisteredSaver, object_name_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::tensorflow::TrackableObjectGraph_TrackableObject_ObjectReference)},
  { 7, -1, sizeof(::tensorflow::TrackableObjectGraph_TrackableObject_SerializedTensor)},
  { 15, -1, sizeof(::tensorflow::TrackableObjectGraph_TrackableObject_SlotVariableReference)},
  { 23, -1, sizeof(::tensorflow::TrackableObjectGraph_TrackableObject)},
  { 33, -1, sizeof(::tensorflow::TrackableObjectGraph)},
  { 39, -1, sizeof(::tensorflow::RegisteredSaver)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tensorflow::_TrackableObjectGraph_TrackableObject_ObjectReference_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tensorflow::_TrackableObjectGraph_TrackableObject_SerializedTensor_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tensorflow::_TrackableObjectGraph_TrackableObject_SlotVariableReference_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tensorflow::_TrackableObjectGraph_TrackableObject_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tensorflow::_TrackableObjectGraph_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tensorflow::_RegisteredSaver_default_instance_),
};

const char descriptor_table_protodef_trackable_5fobject_5fgraph_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\034trackable_object_graph.proto\022\ntensorfl"
  "ow\032\036google/protobuf/wrappers.proto\"\363\005\n\024T"
  "rackableObjectGraph\022\?\n\005nodes\030\001 \003(\01320.ten"
  "sorflow.TrackableObjectGraph.TrackableOb"
  "ject\032\231\005\n\017TrackableObject\022R\n\010children\030\001 \003"
  "(\0132@.tensorflow.TrackableObjectGraph.Tra"
  "ckableObject.ObjectReference\022U\n\nattribut"
  "es\030\002 \003(\0132A.tensorflow.TrackableObjectGra"
  "ph.TrackableObject.SerializedTensor\022^\n\016s"
  "lot_variables\030\003 \003(\0132F.tensorflow.Trackab"
  "leObjectGraph.TrackableObject.SlotVariab"
  "leReference\0225\n\020registered_saver\030\004 \001(\0132\033."
  "tensorflow.RegisteredSaver\0229\n\025has_checkp"
  "oint_values\030\005 \001(\0132\032.google.protobuf.Bool"
  "Value\0326\n\017ObjectReference\022\017\n\007node_id\030\001 \001("
  "\005\022\022\n\nlocal_name\030\002 \001(\t\032c\n\020SerializedTenso"
  "r\022\014\n\004name\030\001 \001(\t\022\021\n\tfull_name\030\002 \001(\t\022\026\n\016ch"
  "eckpoint_key\030\003 \001(\tJ\004\010\004\020\005R\020optional_resto"
  "re\032l\n\025SlotVariableReference\022!\n\031original_"
  "variable_node_id\030\001 \001(\005\022\021\n\tslot_name\030\002 \001("
  "\t\022\035\n\025slot_variable_node_id\030\003 \001(\005\"4\n\017Regi"
  "steredSaver\022\014\n\004name\030\001 \001(\t\022\023\n\013object_name"
  "\030\002 \001(\tBZZUgithub.com/tensorflow/tensorfl"
  "ow/tensorflow/go/core/protobuf/for_core_"
  "protos_go_proto\370\001\001b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_trackable_5fobject_5fgraph_2eproto_deps[1] = {
  &::descriptor_table_google_2fprotobuf_2fwrappers_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_trackable_5fobject_5fgraph_2eproto_sccs[6] = {
  &scc_info_RegisteredSaver_trackable_5fobject_5fgraph_2eproto.base,
  &scc_info_TrackableObjectGraph_trackable_5fobject_5fgraph_2eproto.base,
  &scc_info_TrackableObjectGraph_TrackableObject_trackable_5fobject_5fgraph_2eproto.base,
  &scc_info_TrackableObjectGraph_TrackableObject_ObjectReference_trackable_5fobject_5fgraph_2eproto.base,
  &scc_info_TrackableObjectGraph_TrackableObject_SerializedTensor_trackable_5fobject_5fgraph_2eproto.base,
  &scc_info_TrackableObjectGraph_TrackableObject_SlotVariableReference_trackable_5fobject_5fgraph_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_trackable_5fobject_5fgraph_2eproto_once;
static bool descriptor_table_trackable_5fobject_5fgraph_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_trackable_5fobject_5fgraph_2eproto = {
  &descriptor_table_trackable_5fobject_5fgraph_2eproto_initialized, descriptor_table_protodef_trackable_5fobject_5fgraph_2eproto, "trackable_object_graph.proto", 986,
  &descriptor_table_trackable_5fobject_5fgraph_2eproto_once, descriptor_table_trackable_5fobject_5fgraph_2eproto_sccs, descriptor_table_trackable_5fobject_5fgraph_2eproto_deps, 6, 1,
  schemas, file_default_instances, TableStruct_trackable_5fobject_5fgraph_2eproto::offsets,
  file_level_metadata_trackable_5fobject_5fgraph_2eproto, 6, file_level_enum_descriptors_trackable_5fobject_5fgraph_2eproto, file_level_service_descriptors_trackable_5fobject_5fgraph_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_trackable_5fobject_5fgraph_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_trackable_5fobject_5fgraph_2eproto), true);
namespace tensorflow {

// ===================================================================

void TrackableObjectGraph_TrackableObject_ObjectReference::InitAsDefaultInstance() {
}
class TrackableObjectGraph_TrackableObject_ObjectReference::_Internal {
 public:
};

TrackableObjectGraph_TrackableObject_ObjectReference::TrackableObjectGraph_TrackableObject_ObjectReference()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.TrackableObjectGraph.TrackableObject.ObjectReference)
}
TrackableObjectGraph_TrackableObject_ObjectReference::TrackableObjectGraph_TrackableObject_ObjectReference(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.TrackableObjectGraph.TrackableObject.ObjectReference)
}
TrackableObjectGraph_TrackableObject_ObjectReference::TrackableObjectGraph_TrackableObject_ObjectReference(const TrackableObjectGraph_TrackableObject_ObjectReference& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  local_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.local_name().empty()) {
    local_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.local_name(),
      GetArenaNoVirtual());
  }
  node_id_ = from.node_id_;
  // @@protoc_insertion_point(copy_constructor:tensorflow.TrackableObjectGraph.TrackableObject.ObjectReference)
}

void TrackableObjectGraph_TrackableObject_ObjectReference::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TrackableObjectGraph_TrackableObject_ObjectReference_trackable_5fobject_5fgraph_2eproto.base);
  local_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  node_id_ = 0;
}

TrackableObjectGraph_TrackableObject_ObjectReference::~TrackableObjectGraph_TrackableObject_ObjectReference() {
  // @@protoc_insertion_point(destructor:tensorflow.TrackableObjectGraph.TrackableObject.ObjectReference)
  SharedDtor();
}

void TrackableObjectGraph_TrackableObject_ObjectReference::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  local_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TrackableObjectGraph_TrackableObject_ObjectReference::ArenaDtor(void* object) {
  TrackableObjectGraph_TrackableObject_ObjectReference* _this = reinterpret_cast< TrackableObjectGraph_TrackableObject_ObjectReference* >(object);
  (void)_this;
}
void TrackableObjectGraph_TrackableObject_ObjectReference::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TrackableObjectGraph_TrackableObject_ObjectReference::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TrackableObjectGraph_TrackableObject_ObjectReference& TrackableObjectGraph_TrackableObject_ObjectReference::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TrackableObjectGraph_TrackableObject_ObjectReference_trackable_5fobject_5fgraph_2eproto.base);
  return *internal_default_instance();
}


void TrackableObjectGraph_TrackableObject_ObjectReference::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.TrackableObjectGraph.TrackableObject.ObjectReference)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  local_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  node_id_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TrackableObjectGraph_TrackableObject_ObjectReference::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 node_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          node_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string local_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_local_name(), ptr, ctx, "tensorflow.TrackableObjectGraph.TrackableObject.ObjectReference.local_name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TrackableObjectGraph_TrackableObject_ObjectReference::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.TrackableObjectGraph.TrackableObject.ObjectReference)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 node_id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &node_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string local_name = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_local_name()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->local_name().data(), static_cast<int>(this->local_name().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "tensorflow.TrackableObjectGraph.TrackableObject.ObjectReference.local_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.TrackableObjectGraph.TrackableObject.ObjectReference)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.TrackableObjectGraph.TrackableObject.ObjectReference)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TrackableObjectGraph_TrackableObject_ObjectReference::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.TrackableObjectGraph.TrackableObject.ObjectReference)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 node_id = 1;
  if (this->node_id() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->node_id(), output);
  }

  // string local_name = 2;
  if (this->local_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->local_name().data(), static_cast<int>(this->local_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.TrackableObjectGraph.TrackableObject.ObjectReference.local_name");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->local_name(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tensorflow.TrackableObjectGraph.TrackableObject.ObjectReference)
}

::PROTOBUF_NAMESPACE_ID::uint8* TrackableObjectGraph_TrackableObject_ObjectReference::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.TrackableObjectGraph.TrackableObject.ObjectReference)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 node_id = 1;
  if (this->node_id() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->node_id(), target);
  }

  // string local_name = 2;
  if (this->local_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->local_name().data(), static_cast<int>(this->local_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.TrackableObjectGraph.TrackableObject.ObjectReference.local_name");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->local_name(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.TrackableObjectGraph.TrackableObject.ObjectReference)
  return target;
}

size_t TrackableObjectGraph_TrackableObject_ObjectReference::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.TrackableObjectGraph.TrackableObject.ObjectReference)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string local_name = 2;
  if (this->local_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->local_name());
  }

  // int32 node_id = 1;
  if (this->node_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->node_id());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TrackableObjectGraph_TrackableObject_ObjectReference::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.TrackableObjectGraph.TrackableObject.ObjectReference)
  GOOGLE_DCHECK_NE(&from, this);
  const TrackableObjectGraph_TrackableObject_ObjectReference* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TrackableObjectGraph_TrackableObject_ObjectReference>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.TrackableObjectGraph.TrackableObject.ObjectReference)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.TrackableObjectGraph.TrackableObject.ObjectReference)
    MergeFrom(*source);
  }
}

void TrackableObjectGraph_TrackableObject_ObjectReference::MergeFrom(const TrackableObjectGraph_TrackableObject_ObjectReference& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.TrackableObjectGraph.TrackableObject.ObjectReference)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.local_name().size() > 0) {
    set_local_name(from.local_name());
  }
  if (from.node_id() != 0) {
    set_node_id(from.node_id());
  }
}

void TrackableObjectGraph_TrackableObject_ObjectReference::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.TrackableObjectGraph.TrackableObject.ObjectReference)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrackableObjectGraph_TrackableObject_ObjectReference::CopyFrom(const TrackableObjectGraph_TrackableObject_ObjectReference& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.TrackableObjectGraph.TrackableObject.ObjectReference)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrackableObjectGraph_TrackableObject_ObjectReference::IsInitialized() const {
  return true;
}

void TrackableObjectGraph_TrackableObject_ObjectReference::InternalSwap(TrackableObjectGraph_TrackableObject_ObjectReference* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  local_name_.Swap(&other->local_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(node_id_, other->node_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TrackableObjectGraph_TrackableObject_ObjectReference::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TrackableObjectGraph_TrackableObject_SerializedTensor::InitAsDefaultInstance() {
}
class TrackableObjectGraph_TrackableObject_SerializedTensor::_Internal {
 public:
};

TrackableObjectGraph_TrackableObject_SerializedTensor::TrackableObjectGraph_TrackableObject_SerializedTensor()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.TrackableObjectGraph.TrackableObject.SerializedTensor)
}
TrackableObjectGraph_TrackableObject_SerializedTensor::TrackableObjectGraph_TrackableObject_SerializedTensor(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.TrackableObjectGraph.TrackableObject.SerializedTensor)
}
TrackableObjectGraph_TrackableObject_SerializedTensor::TrackableObjectGraph_TrackableObject_SerializedTensor(const TrackableObjectGraph_TrackableObject_SerializedTensor& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.name().empty()) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name(),
      GetArenaNoVirtual());
  }
  full_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.full_name().empty()) {
    full_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.full_name(),
      GetArenaNoVirtual());
  }
  checkpoint_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.checkpoint_key().empty()) {
    checkpoint_key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.checkpoint_key(),
      GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(copy_constructor:tensorflow.TrackableObjectGraph.TrackableObject.SerializedTensor)
}

void TrackableObjectGraph_TrackableObject_SerializedTensor::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TrackableObjectGraph_TrackableObject_SerializedTensor_trackable_5fobject_5fgraph_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  full_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  checkpoint_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

TrackableObjectGraph_TrackableObject_SerializedTensor::~TrackableObjectGraph_TrackableObject_SerializedTensor() {
  // @@protoc_insertion_point(destructor:tensorflow.TrackableObjectGraph.TrackableObject.SerializedTensor)
  SharedDtor();
}

void TrackableObjectGraph_TrackableObject_SerializedTensor::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  full_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  checkpoint_key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TrackableObjectGraph_TrackableObject_SerializedTensor::ArenaDtor(void* object) {
  TrackableObjectGraph_TrackableObject_SerializedTensor* _this = reinterpret_cast< TrackableObjectGraph_TrackableObject_SerializedTensor* >(object);
  (void)_this;
}
void TrackableObjectGraph_TrackableObject_SerializedTensor::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TrackableObjectGraph_TrackableObject_SerializedTensor::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TrackableObjectGraph_TrackableObject_SerializedTensor& TrackableObjectGraph_TrackableObject_SerializedTensor::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TrackableObjectGraph_TrackableObject_SerializedTensor_trackable_5fobject_5fgraph_2eproto.base);
  return *internal_default_instance();
}


void TrackableObjectGraph_TrackableObject_SerializedTensor::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.TrackableObjectGraph.TrackableObject.SerializedTensor)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  full_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  checkpoint_key_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TrackableObjectGraph_TrackableObject_SerializedTensor::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_name(), ptr, ctx, "tensorflow.TrackableObjectGraph.TrackableObject.SerializedTensor.name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string full_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_full_name(), ptr, ctx, "tensorflow.TrackableObjectGraph.TrackableObject.SerializedTensor.full_name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string checkpoint_key = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_checkpoint_key(), ptr, ctx, "tensorflow.TrackableObjectGraph.TrackableObject.SerializedTensor.checkpoint_key");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TrackableObjectGraph_TrackableObject_SerializedTensor::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.TrackableObjectGraph.TrackableObject.SerializedTensor)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string name = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "tensorflow.TrackableObjectGraph.TrackableObject.SerializedTensor.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string full_name = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_full_name()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->full_name().data(), static_cast<int>(this->full_name().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "tensorflow.TrackableObjectGraph.TrackableObject.SerializedTensor.full_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string checkpoint_key = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_checkpoint_key()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->checkpoint_key().data(), static_cast<int>(this->checkpoint_key().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "tensorflow.TrackableObjectGraph.TrackableObject.SerializedTensor.checkpoint_key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.TrackableObjectGraph.TrackableObject.SerializedTensor)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.TrackableObjectGraph.TrackableObject.SerializedTensor)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TrackableObjectGraph_TrackableObject_SerializedTensor::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.TrackableObjectGraph.TrackableObject.SerializedTensor)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.TrackableObjectGraph.TrackableObject.SerializedTensor.name");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // string full_name = 2;
  if (this->full_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->full_name().data(), static_cast<int>(this->full_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.TrackableObjectGraph.TrackableObject.SerializedTensor.full_name");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->full_name(), output);
  }

  // string checkpoint_key = 3;
  if (this->checkpoint_key().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->checkpoint_key().data(), static_cast<int>(this->checkpoint_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.TrackableObjectGraph.TrackableObject.SerializedTensor.checkpoint_key");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->checkpoint_key(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tensorflow.TrackableObjectGraph.TrackableObject.SerializedTensor)
}

::PROTOBUF_NAMESPACE_ID::uint8* TrackableObjectGraph_TrackableObject_SerializedTensor::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.TrackableObjectGraph.TrackableObject.SerializedTensor)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.TrackableObjectGraph.TrackableObject.SerializedTensor.name");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // string full_name = 2;
  if (this->full_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->full_name().data(), static_cast<int>(this->full_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.TrackableObjectGraph.TrackableObject.SerializedTensor.full_name");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->full_name(), target);
  }

  // string checkpoint_key = 3;
  if (this->checkpoint_key().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->checkpoint_key().data(), static_cast<int>(this->checkpoint_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.TrackableObjectGraph.TrackableObject.SerializedTensor.checkpoint_key");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        3, this->checkpoint_key(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.TrackableObjectGraph.TrackableObject.SerializedTensor)
  return target;
}

size_t TrackableObjectGraph_TrackableObject_SerializedTensor::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.TrackableObjectGraph.TrackableObject.SerializedTensor)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->name());
  }

  // string full_name = 2;
  if (this->full_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->full_name());
  }

  // string checkpoint_key = 3;
  if (this->checkpoint_key().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->checkpoint_key());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TrackableObjectGraph_TrackableObject_SerializedTensor::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.TrackableObjectGraph.TrackableObject.SerializedTensor)
  GOOGLE_DCHECK_NE(&from, this);
  const TrackableObjectGraph_TrackableObject_SerializedTensor* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TrackableObjectGraph_TrackableObject_SerializedTensor>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.TrackableObjectGraph.TrackableObject.SerializedTensor)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.TrackableObjectGraph.TrackableObject.SerializedTensor)
    MergeFrom(*source);
  }
}

void TrackableObjectGraph_TrackableObject_SerializedTensor::MergeFrom(const TrackableObjectGraph_TrackableObject_SerializedTensor& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.TrackableObjectGraph.TrackableObject.SerializedTensor)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {
    set_name(from.name());
  }
  if (from.full_name().size() > 0) {
    set_full_name(from.full_name());
  }
  if (from.checkpoint_key().size() > 0) {
    set_checkpoint_key(from.checkpoint_key());
  }
}

void TrackableObjectGraph_TrackableObject_SerializedTensor::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.TrackableObjectGraph.TrackableObject.SerializedTensor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrackableObjectGraph_TrackableObject_SerializedTensor::CopyFrom(const TrackableObjectGraph_TrackableObject_SerializedTensor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.TrackableObjectGraph.TrackableObject.SerializedTensor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrackableObjectGraph_TrackableObject_SerializedTensor::IsInitialized() const {
  return true;
}

void TrackableObjectGraph_TrackableObject_SerializedTensor::InternalSwap(TrackableObjectGraph_TrackableObject_SerializedTensor* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  full_name_.Swap(&other->full_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  checkpoint_key_.Swap(&other->checkpoint_key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata TrackableObjectGraph_TrackableObject_SerializedTensor::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TrackableObjectGraph_TrackableObject_SlotVariableReference::InitAsDefaultInstance() {
}
class TrackableObjectGraph_TrackableObject_SlotVariableReference::_Internal {
 public:
};

TrackableObjectGraph_TrackableObject_SlotVariableReference::TrackableObjectGraph_TrackableObject_SlotVariableReference()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.TrackableObjectGraph.TrackableObject.SlotVariableReference)
}
TrackableObjectGraph_TrackableObject_SlotVariableReference::TrackableObjectGraph_TrackableObject_SlotVariableReference(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.TrackableObjectGraph.TrackableObject.SlotVariableReference)
}
TrackableObjectGraph_TrackableObject_SlotVariableReference::TrackableObjectGraph_TrackableObject_SlotVariableReference(const TrackableObjectGraph_TrackableObject_SlotVariableReference& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  slot_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.slot_name().empty()) {
    slot_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.slot_name(),
      GetArenaNoVirtual());
  }
  ::memcpy(&original_variable_node_id_, &from.original_variable_node_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&slot_variable_node_id_) -
    reinterpret_cast<char*>(&original_variable_node_id_)) + sizeof(slot_variable_node_id_));
  // @@protoc_insertion_point(copy_constructor:tensorflow.TrackableObjectGraph.TrackableObject.SlotVariableReference)
}

void TrackableObjectGraph_TrackableObject_SlotVariableReference::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TrackableObjectGraph_TrackableObject_SlotVariableReference_trackable_5fobject_5fgraph_2eproto.base);
  slot_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&original_variable_node_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&slot_variable_node_id_) -
      reinterpret_cast<char*>(&original_variable_node_id_)) + sizeof(slot_variable_node_id_));
}

TrackableObjectGraph_TrackableObject_SlotVariableReference::~TrackableObjectGraph_TrackableObject_SlotVariableReference() {
  // @@protoc_insertion_point(destructor:tensorflow.TrackableObjectGraph.TrackableObject.SlotVariableReference)
  SharedDtor();
}

void TrackableObjectGraph_TrackableObject_SlotVariableReference::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  slot_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TrackableObjectGraph_TrackableObject_SlotVariableReference::ArenaDtor(void* object) {
  TrackableObjectGraph_TrackableObject_SlotVariableReference* _this = reinterpret_cast< TrackableObjectGraph_TrackableObject_SlotVariableReference* >(object);
  (void)_this;
}
void TrackableObjectGraph_TrackableObject_SlotVariableReference::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TrackableObjectGraph_TrackableObject_SlotVariableReference::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TrackableObjectGraph_TrackableObject_SlotVariableReference& TrackableObjectGraph_TrackableObject_SlotVariableReference::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TrackableObjectGraph_TrackableObject_SlotVariableReference_trackable_5fobject_5fgraph_2eproto.base);
  return *internal_default_instance();
}


void TrackableObjectGraph_TrackableObject_SlotVariableReference::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.TrackableObjectGraph.TrackableObject.SlotVariableReference)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  slot_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  ::memset(&original_variable_node_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&slot_variable_node_id_) -
      reinterpret_cast<char*>(&original_variable_node_id_)) + sizeof(slot_variable_node_id_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TrackableObjectGraph_TrackableObject_SlotVariableReference::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 original_variable_node_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          original_variable_node_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string slot_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_slot_name(), ptr, ctx, "tensorflow.TrackableObjectGraph.TrackableObject.SlotVariableReference.slot_name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 slot_variable_node_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          slot_variable_node_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TrackableObjectGraph_TrackableObject_SlotVariableReference::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.TrackableObjectGraph.TrackableObject.SlotVariableReference)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 original_variable_node_id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &original_variable_node_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string slot_name = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_slot_name()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->slot_name().data(), static_cast<int>(this->slot_name().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "tensorflow.TrackableObjectGraph.TrackableObject.SlotVariableReference.slot_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 slot_variable_node_id = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &slot_variable_node_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.TrackableObjectGraph.TrackableObject.SlotVariableReference)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.TrackableObjectGraph.TrackableObject.SlotVariableReference)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TrackableObjectGraph_TrackableObject_SlotVariableReference::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.TrackableObjectGraph.TrackableObject.SlotVariableReference)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 original_variable_node_id = 1;
  if (this->original_variable_node_id() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->original_variable_node_id(), output);
  }

  // string slot_name = 2;
  if (this->slot_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->slot_name().data(), static_cast<int>(this->slot_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.TrackableObjectGraph.TrackableObject.SlotVariableReference.slot_name");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->slot_name(), output);
  }

  // int32 slot_variable_node_id = 3;
  if (this->slot_variable_node_id() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(3, this->slot_variable_node_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tensorflow.TrackableObjectGraph.TrackableObject.SlotVariableReference)
}

::PROTOBUF_NAMESPACE_ID::uint8* TrackableObjectGraph_TrackableObject_SlotVariableReference::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.TrackableObjectGraph.TrackableObject.SlotVariableReference)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 original_variable_node_id = 1;
  if (this->original_variable_node_id() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->original_variable_node_id(), target);
  }

  // string slot_name = 2;
  if (this->slot_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->slot_name().data(), static_cast<int>(this->slot_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.TrackableObjectGraph.TrackableObject.SlotVariableReference.slot_name");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->slot_name(), target);
  }

  // int32 slot_variable_node_id = 3;
  if (this->slot_variable_node_id() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->slot_variable_node_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.TrackableObjectGraph.TrackableObject.SlotVariableReference)
  return target;
}

size_t TrackableObjectGraph_TrackableObject_SlotVariableReference::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.TrackableObjectGraph.TrackableObject.SlotVariableReference)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string slot_name = 2;
  if (this->slot_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->slot_name());
  }

  // int32 original_variable_node_id = 1;
  if (this->original_variable_node_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->original_variable_node_id());
  }

  // int32 slot_variable_node_id = 3;
  if (this->slot_variable_node_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->slot_variable_node_id());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TrackableObjectGraph_TrackableObject_SlotVariableReference::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.TrackableObjectGraph.TrackableObject.SlotVariableReference)
  GOOGLE_DCHECK_NE(&from, this);
  const TrackableObjectGraph_TrackableObject_SlotVariableReference* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TrackableObjectGraph_TrackableObject_SlotVariableReference>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.TrackableObjectGraph.TrackableObject.SlotVariableReference)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.TrackableObjectGraph.TrackableObject.SlotVariableReference)
    MergeFrom(*source);
  }
}

void TrackableObjectGraph_TrackableObject_SlotVariableReference::MergeFrom(const TrackableObjectGraph_TrackableObject_SlotVariableReference& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.TrackableObjectGraph.TrackableObject.SlotVariableReference)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.slot_name().size() > 0) {
    set_slot_name(from.slot_name());
  }
  if (from.original_variable_node_id() != 0) {
    set_original_variable_node_id(from.original_variable_node_id());
  }
  if (from.slot_variable_node_id() != 0) {
    set_slot_variable_node_id(from.slot_variable_node_id());
  }
}

void TrackableObjectGraph_TrackableObject_SlotVariableReference::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.TrackableObjectGraph.TrackableObject.SlotVariableReference)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrackableObjectGraph_TrackableObject_SlotVariableReference::CopyFrom(const TrackableObjectGraph_TrackableObject_SlotVariableReference& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.TrackableObjectGraph.TrackableObject.SlotVariableReference)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrackableObjectGraph_TrackableObject_SlotVariableReference::IsInitialized() const {
  return true;
}

void TrackableObjectGraph_TrackableObject_SlotVariableReference::InternalSwap(TrackableObjectGraph_TrackableObject_SlotVariableReference* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  slot_name_.Swap(&other->slot_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(original_variable_node_id_, other->original_variable_node_id_);
  swap(slot_variable_node_id_, other->slot_variable_node_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TrackableObjectGraph_TrackableObject_SlotVariableReference::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TrackableObjectGraph_TrackableObject::InitAsDefaultInstance() {
  ::tensorflow::_TrackableObjectGraph_TrackableObject_default_instance_._instance.get_mutable()->registered_saver_ = const_cast< ::tensorflow::RegisteredSaver*>(
      ::tensorflow::RegisteredSaver::internal_default_instance());
  ::tensorflow::_TrackableObjectGraph_TrackableObject_default_instance_._instance.get_mutable()->has_checkpoint_values_ = const_cast< PROTOBUF_NAMESPACE_ID::BoolValue*>(
      PROTOBUF_NAMESPACE_ID::BoolValue::internal_default_instance());
}
class TrackableObjectGraph_TrackableObject::_Internal {
 public:
  static const ::tensorflow::RegisteredSaver& registered_saver(const TrackableObjectGraph_TrackableObject* msg);
  static const PROTOBUF_NAMESPACE_ID::BoolValue& has_checkpoint_values(const TrackableObjectGraph_TrackableObject* msg);
};

const ::tensorflow::RegisteredSaver&
TrackableObjectGraph_TrackableObject::_Internal::registered_saver(const TrackableObjectGraph_TrackableObject* msg) {
  return *msg->registered_saver_;
}
const PROTOBUF_NAMESPACE_ID::BoolValue&
TrackableObjectGraph_TrackableObject::_Internal::has_checkpoint_values(const TrackableObjectGraph_TrackableObject* msg) {
  return *msg->has_checkpoint_values_;
}
void TrackableObjectGraph_TrackableObject::unsafe_arena_set_allocated_registered_saver(
    ::tensorflow::RegisteredSaver* registered_saver) {
  if (GetArenaNoVirtual() == nullptr) {
    delete registered_saver_;
  }
  registered_saver_ = registered_saver;
  if (registered_saver) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.TrackableObjectGraph.TrackableObject.registered_saver)
}
void TrackableObjectGraph_TrackableObject::unsafe_arena_set_allocated_has_checkpoint_values(
    PROTOBUF_NAMESPACE_ID::BoolValue* has_checkpoint_values) {
  if (GetArenaNoVirtual() == nullptr) {
    delete has_checkpoint_values_;
  }
  has_checkpoint_values_ = has_checkpoint_values;
  if (has_checkpoint_values) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.TrackableObjectGraph.TrackableObject.has_checkpoint_values)
}
void TrackableObjectGraph_TrackableObject::clear_has_checkpoint_values() {
  if (GetArenaNoVirtual() == nullptr && has_checkpoint_values_ != nullptr) {
    delete has_checkpoint_values_;
  }
  has_checkpoint_values_ = nullptr;
}
TrackableObjectGraph_TrackableObject::TrackableObjectGraph_TrackableObject()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.TrackableObjectGraph.TrackableObject)
}
TrackableObjectGraph_TrackableObject::TrackableObjectGraph_TrackableObject(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena),
  children_(arena),
  attributes_(arena),
  slot_variables_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.TrackableObjectGraph.TrackableObject)
}
TrackableObjectGraph_TrackableObject::TrackableObjectGraph_TrackableObject(const TrackableObjectGraph_TrackableObject& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      children_(from.children_),
      attributes_(from.attributes_),
      slot_variables_(from.slot_variables_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_registered_saver()) {
    registered_saver_ = new ::tensorflow::RegisteredSaver(*from.registered_saver_);
  } else {
    registered_saver_ = nullptr;
  }
  if (from.has_has_checkpoint_values()) {
    has_checkpoint_values_ = new PROTOBUF_NAMESPACE_ID::BoolValue(*from.has_checkpoint_values_);
  } else {
    has_checkpoint_values_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:tensorflow.TrackableObjectGraph.TrackableObject)
}

void TrackableObjectGraph_TrackableObject::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TrackableObjectGraph_TrackableObject_trackable_5fobject_5fgraph_2eproto.base);
  ::memset(&registered_saver_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&has_checkpoint_values_) -
      reinterpret_cast<char*>(&registered_saver_)) + sizeof(has_checkpoint_values_));
}

TrackableObjectGraph_TrackableObject::~TrackableObjectGraph_TrackableObject() {
  // @@protoc_insertion_point(destructor:tensorflow.TrackableObjectGraph.TrackableObject)
  SharedDtor();
}

void TrackableObjectGraph_TrackableObject::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  if (this != internal_default_instance()) delete registered_saver_;
  if (this != internal_default_instance()) delete has_checkpoint_values_;
}

void TrackableObjectGraph_TrackableObject::ArenaDtor(void* object) {
  TrackableObjectGraph_TrackableObject* _this = reinterpret_cast< TrackableObjectGraph_TrackableObject* >(object);
  (void)_this;
}
void TrackableObjectGraph_TrackableObject::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TrackableObjectGraph_TrackableObject::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TrackableObjectGraph_TrackableObject& TrackableObjectGraph_TrackableObject::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TrackableObjectGraph_TrackableObject_trackable_5fobject_5fgraph_2eproto.base);
  return *internal_default_instance();
}


void TrackableObjectGraph_TrackableObject::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.TrackableObjectGraph.TrackableObject)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  children_.Clear();
  attributes_.Clear();
  slot_variables_.Clear();
  if (GetArenaNoVirtual() == nullptr && registered_saver_ != nullptr) {
    delete registered_saver_;
  }
  registered_saver_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && has_checkpoint_values_ != nullptr) {
    delete has_checkpoint_values_;
  }
  has_checkpoint_values_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TrackableObjectGraph_TrackableObject::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .tensorflow.TrackableObjectGraph.TrackableObject.ObjectReference children = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_children(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      // repeated .tensorflow.TrackableObjectGraph.TrackableObject.SerializedTensor attributes = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_attributes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 18);
        } else goto handle_unusual;
        continue;
      // repeated .tensorflow.TrackableObjectGraph.TrackableObject.SlotVariableReference slot_variables = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_slot_variables(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 26);
        } else goto handle_unusual;
        continue;
      // .tensorflow.RegisteredSaver registered_saver = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(mutable_registered_saver(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.BoolValue has_checkpoint_values = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(mutable_has_checkpoint_values(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TrackableObjectGraph_TrackableObject::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.TrackableObjectGraph.TrackableObject)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .tensorflow.TrackableObjectGraph.TrackableObject.ObjectReference children = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_children()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .tensorflow.TrackableObjectGraph.TrackableObject.SerializedTensor attributes = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_attributes()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .tensorflow.TrackableObjectGraph.TrackableObject.SlotVariableReference slot_variables = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_slot_variables()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .tensorflow.RegisteredSaver registered_saver = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_registered_saver()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.BoolValue has_checkpoint_values = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_has_checkpoint_values()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.TrackableObjectGraph.TrackableObject)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.TrackableObjectGraph.TrackableObject)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TrackableObjectGraph_TrackableObject::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.TrackableObjectGraph.TrackableObject)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .tensorflow.TrackableObjectGraph.TrackableObject.ObjectReference children = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->children_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->children(static_cast<int>(i)),
      output);
  }

  // repeated .tensorflow.TrackableObjectGraph.TrackableObject.SerializedTensor attributes = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->attributes_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->attributes(static_cast<int>(i)),
      output);
  }

  // repeated .tensorflow.TrackableObjectGraph.TrackableObject.SlotVariableReference slot_variables = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->slot_variables_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->slot_variables(static_cast<int>(i)),
      output);
  }

  // .tensorflow.RegisteredSaver registered_saver = 4;
  if (this->has_registered_saver()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, _Internal::registered_saver(this), output);
  }

  // .google.protobuf.BoolValue has_checkpoint_values = 5;
  if (this->has_has_checkpoint_values()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, _Internal::has_checkpoint_values(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tensorflow.TrackableObjectGraph.TrackableObject)
}

::PROTOBUF_NAMESPACE_ID::uint8* TrackableObjectGraph_TrackableObject::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.TrackableObjectGraph.TrackableObject)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .tensorflow.TrackableObjectGraph.TrackableObject.ObjectReference children = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->children_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->children(static_cast<int>(i)), target);
  }

  // repeated .tensorflow.TrackableObjectGraph.TrackableObject.SerializedTensor attributes = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->attributes_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->attributes(static_cast<int>(i)), target);
  }

  // repeated .tensorflow.TrackableObjectGraph.TrackableObject.SlotVariableReference slot_variables = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->slot_variables_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->slot_variables(static_cast<int>(i)), target);
  }

  // .tensorflow.RegisteredSaver registered_saver = 4;
  if (this->has_registered_saver()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, _Internal::registered_saver(this), target);
  }

  // .google.protobuf.BoolValue has_checkpoint_values = 5;
  if (this->has_has_checkpoint_values()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, _Internal::has_checkpoint_values(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.TrackableObjectGraph.TrackableObject)
  return target;
}

size_t TrackableObjectGraph_TrackableObject::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.TrackableObjectGraph.TrackableObject)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .tensorflow.TrackableObjectGraph.TrackableObject.ObjectReference children = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->children_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->children(static_cast<int>(i)));
    }
  }

  // repeated .tensorflow.TrackableObjectGraph.TrackableObject.SerializedTensor attributes = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->attributes_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->attributes(static_cast<int>(i)));
    }
  }

  // repeated .tensorflow.TrackableObjectGraph.TrackableObject.SlotVariableReference slot_variables = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->slot_variables_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->slot_variables(static_cast<int>(i)));
    }
  }

  // .tensorflow.RegisteredSaver registered_saver = 4;
  if (this->has_registered_saver()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *registered_saver_);
  }

  // .google.protobuf.BoolValue has_checkpoint_values = 5;
  if (this->has_has_checkpoint_values()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *has_checkpoint_values_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TrackableObjectGraph_TrackableObject::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.TrackableObjectGraph.TrackableObject)
  GOOGLE_DCHECK_NE(&from, this);
  const TrackableObjectGraph_TrackableObject* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TrackableObjectGraph_TrackableObject>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.TrackableObjectGraph.TrackableObject)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.TrackableObjectGraph.TrackableObject)
    MergeFrom(*source);
  }
}

void TrackableObjectGraph_TrackableObject::MergeFrom(const TrackableObjectGraph_TrackableObject& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.TrackableObjectGraph.TrackableObject)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  children_.MergeFrom(from.children_);
  attributes_.MergeFrom(from.attributes_);
  slot_variables_.MergeFrom(from.slot_variables_);
  if (from.has_registered_saver()) {
    mutable_registered_saver()->::tensorflow::RegisteredSaver::MergeFrom(from.registered_saver());
  }
  if (from.has_has_checkpoint_values()) {
    mutable_has_checkpoint_values()->PROTOBUF_NAMESPACE_ID::BoolValue::MergeFrom(from.has_checkpoint_values());
  }
}

void TrackableObjectGraph_TrackableObject::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.TrackableObjectGraph.TrackableObject)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrackableObjectGraph_TrackableObject::CopyFrom(const TrackableObjectGraph_TrackableObject& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.TrackableObjectGraph.TrackableObject)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrackableObjectGraph_TrackableObject::IsInitialized() const {
  return true;
}

void TrackableObjectGraph_TrackableObject::InternalSwap(TrackableObjectGraph_TrackableObject* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&children_)->InternalSwap(CastToBase(&other->children_));
  CastToBase(&attributes_)->InternalSwap(CastToBase(&other->attributes_));
  CastToBase(&slot_variables_)->InternalSwap(CastToBase(&other->slot_variables_));
  swap(registered_saver_, other->registered_saver_);
  swap(has_checkpoint_values_, other->has_checkpoint_values_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TrackableObjectGraph_TrackableObject::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TrackableObjectGraph::InitAsDefaultInstance() {
}
class TrackableObjectGraph::_Internal {
 public:
};

TrackableObjectGraph::TrackableObjectGraph()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.TrackableObjectGraph)
}
TrackableObjectGraph::TrackableObjectGraph(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena),
  nodes_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.TrackableObjectGraph)
}
TrackableObjectGraph::TrackableObjectGraph(const TrackableObjectGraph& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      nodes_(from.nodes_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:tensorflow.TrackableObjectGraph)
}

void TrackableObjectGraph::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TrackableObjectGraph_trackable_5fobject_5fgraph_2eproto.base);
}

TrackableObjectGraph::~TrackableObjectGraph() {
  // @@protoc_insertion_point(destructor:tensorflow.TrackableObjectGraph)
  SharedDtor();
}

void TrackableObjectGraph::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
}

void TrackableObjectGraph::ArenaDtor(void* object) {
  TrackableObjectGraph* _this = reinterpret_cast< TrackableObjectGraph* >(object);
  (void)_this;
}
void TrackableObjectGraph::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TrackableObjectGraph::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TrackableObjectGraph& TrackableObjectGraph::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TrackableObjectGraph_trackable_5fobject_5fgraph_2eproto.base);
  return *internal_default_instance();
}


void TrackableObjectGraph::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.TrackableObjectGraph)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  nodes_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TrackableObjectGraph::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .tensorflow.TrackableObjectGraph.TrackableObject nodes = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_nodes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TrackableObjectGraph::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.TrackableObjectGraph)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .tensorflow.TrackableObjectGraph.TrackableObject nodes = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_nodes()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.TrackableObjectGraph)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.TrackableObjectGraph)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TrackableObjectGraph::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.TrackableObjectGraph)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .tensorflow.TrackableObjectGraph.TrackableObject nodes = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->nodes_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->nodes(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tensorflow.TrackableObjectGraph)
}

::PROTOBUF_NAMESPACE_ID::uint8* TrackableObjectGraph::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.TrackableObjectGraph)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .tensorflow.TrackableObjectGraph.TrackableObject nodes = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->nodes_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->nodes(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.TrackableObjectGraph)
  return target;
}

size_t TrackableObjectGraph::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.TrackableObjectGraph)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .tensorflow.TrackableObjectGraph.TrackableObject nodes = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->nodes_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->nodes(static_cast<int>(i)));
    }
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TrackableObjectGraph::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.TrackableObjectGraph)
  GOOGLE_DCHECK_NE(&from, this);
  const TrackableObjectGraph* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TrackableObjectGraph>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.TrackableObjectGraph)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.TrackableObjectGraph)
    MergeFrom(*source);
  }
}

void TrackableObjectGraph::MergeFrom(const TrackableObjectGraph& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.TrackableObjectGraph)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  nodes_.MergeFrom(from.nodes_);
}

void TrackableObjectGraph::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.TrackableObjectGraph)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrackableObjectGraph::CopyFrom(const TrackableObjectGraph& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.TrackableObjectGraph)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrackableObjectGraph::IsInitialized() const {
  return true;
}

void TrackableObjectGraph::InternalSwap(TrackableObjectGraph* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&nodes_)->InternalSwap(CastToBase(&other->nodes_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TrackableObjectGraph::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RegisteredSaver::InitAsDefaultInstance() {
}
class RegisteredSaver::_Internal {
 public:
};

RegisteredSaver::RegisteredSaver()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.RegisteredSaver)
}
RegisteredSaver::RegisteredSaver(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.RegisteredSaver)
}
RegisteredSaver::RegisteredSaver(const RegisteredSaver& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.name().empty()) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name(),
      GetArenaNoVirtual());
  }
  object_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.object_name().empty()) {
    object_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.object_name(),
      GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(copy_constructor:tensorflow.RegisteredSaver)
}

void RegisteredSaver::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RegisteredSaver_trackable_5fobject_5fgraph_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  object_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

RegisteredSaver::~RegisteredSaver() {
  // @@protoc_insertion_point(destructor:tensorflow.RegisteredSaver)
  SharedDtor();
}

void RegisteredSaver::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  object_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RegisteredSaver::ArenaDtor(void* object) {
  RegisteredSaver* _this = reinterpret_cast< RegisteredSaver* >(object);
  (void)_this;
}
void RegisteredSaver::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RegisteredSaver::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RegisteredSaver& RegisteredSaver::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RegisteredSaver_trackable_5fobject_5fgraph_2eproto.base);
  return *internal_default_instance();
}


void RegisteredSaver::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.RegisteredSaver)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  object_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* RegisteredSaver::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_name(), ptr, ctx, "tensorflow.RegisteredSaver.name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string object_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_object_name(), ptr, ctx, "tensorflow.RegisteredSaver.object_name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool RegisteredSaver::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.RegisteredSaver)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string name = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "tensorflow.RegisteredSaver.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string object_name = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_object_name()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->object_name().data(), static_cast<int>(this->object_name().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "tensorflow.RegisteredSaver.object_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.RegisteredSaver)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.RegisteredSaver)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void RegisteredSaver::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.RegisteredSaver)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.RegisteredSaver.name");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // string object_name = 2;
  if (this->object_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->object_name().data(), static_cast<int>(this->object_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.RegisteredSaver.object_name");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->object_name(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tensorflow.RegisteredSaver)
}

::PROTOBUF_NAMESPACE_ID::uint8* RegisteredSaver::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.RegisteredSaver)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.RegisteredSaver.name");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // string object_name = 2;
  if (this->object_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->object_name().data(), static_cast<int>(this->object_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.RegisteredSaver.object_name");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->object_name(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.RegisteredSaver)
  return target;
}

size_t RegisteredSaver::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.RegisteredSaver)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->name());
  }

  // string object_name = 2;
  if (this->object_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->object_name());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RegisteredSaver::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.RegisteredSaver)
  GOOGLE_DCHECK_NE(&from, this);
  const RegisteredSaver* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RegisteredSaver>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.RegisteredSaver)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.RegisteredSaver)
    MergeFrom(*source);
  }
}

void RegisteredSaver::MergeFrom(const RegisteredSaver& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.RegisteredSaver)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {
    set_name(from.name());
  }
  if (from.object_name().size() > 0) {
    set_object_name(from.object_name());
  }
}

void RegisteredSaver::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.RegisteredSaver)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RegisteredSaver::CopyFrom(const RegisteredSaver& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.RegisteredSaver)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegisteredSaver::IsInitialized() const {
  return true;
}

void RegisteredSaver::InternalSwap(RegisteredSaver* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  object_name_.Swap(&other->object_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata RegisteredSaver::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace tensorflow
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::tensorflow::TrackableObjectGraph_TrackableObject_ObjectReference* Arena::CreateMaybeMessage< ::tensorflow::TrackableObjectGraph_TrackableObject_ObjectReference >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::TrackableObjectGraph_TrackableObject_ObjectReference >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::TrackableObjectGraph_TrackableObject_SerializedTensor* Arena::CreateMaybeMessage< ::tensorflow::TrackableObjectGraph_TrackableObject_SerializedTensor >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::TrackableObjectGraph_TrackableObject_SerializedTensor >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::TrackableObjectGraph_TrackableObject_SlotVariableReference* Arena::CreateMaybeMessage< ::tensorflow::TrackableObjectGraph_TrackableObject_SlotVariableReference >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::TrackableObjectGraph_TrackableObject_SlotVariableReference >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::TrackableObjectGraph_TrackableObject* Arena::CreateMaybeMessage< ::tensorflow::TrackableObjectGraph_TrackableObject >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::TrackableObjectGraph_TrackableObject >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::TrackableObjectGraph* Arena::CreateMaybeMessage< ::tensorflow::TrackableObjectGraph >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::TrackableObjectGraph >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::RegisteredSaver* Arena::CreateMaybeMessage< ::tensorflow::RegisteredSaver >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::RegisteredSaver >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
